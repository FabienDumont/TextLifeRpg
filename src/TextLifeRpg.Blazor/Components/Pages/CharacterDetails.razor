@page "/characterdetails/{CharacterId:guid}"
@using TextLifeRpg.Application.Abstraction
@using TextLifeRpg.Domain.Extensions
@inject GameSaveStore GameSaveStore
@inject ITraitService TraitService
@inject IJobService JobService

@rendermode InteractiveServer

@if (_hasError)
{
  <p class="text-red-400">Character was not found or the save was not loaded.</p>
}
else if (_character is null)
{
  <p>Loading...</p>
}
else
{
  <div class="trpg-layout-page">
    @{
      var colorKey = CharacterColorHelper.GetColorKey(_character, GameSaveStore.CurrentSave!.PlayerCharacterId);
    }
    <span class="trpg-title-main @colorKey.ToTailwindClass()">@_character.Name</span>

    <h3 class="text-2xl">Basic informations</h3>
    <div class="space-y-1">
      <div class="flex">
        <span class="font-bold">Age</span>
        <span>&nbsp;:&nbsp;@_character.GetAge(DateOnly.FromDateTime(GameSaveStore.CurrentSave!.World.CurrentDate))</span>
      </div>
      <div class="flex">
        <span class="font-bold">Sex</span>
        <span>&nbsp;:&nbsp;@_character.BiologicalSex</span>
      </div>
      <div class="flex">
        <span class="font-bold">Height</span>
        <span>&nbsp;:&nbsp;@_character.Height cm</span>
      </div>
      <div class="flex">
        <span class="font-bold">Weight</span>
        <span>&nbsp;:&nbsp;@_character.Weight kg</span>
      </div>
      <div class="flex">
        <span class="font-bold">Muscle mass</span>
        <span>&nbsp;:&nbsp;@MuscleMassOptionExtensions.FromKg(_character.MuscleMass).GetDisplayName()</span>
      </div>
      <div class="flex">
        <span class="font-bold">Job</span>
        <span>&nbsp;:&nbsp;</span>
        @if (GameSaveStore.CurrentSave!.PlayerCharacterId == CharacterId || (_playerRelationship is not null && _playerRelationship.History.HasLearnedFact("Job")))
        {
          <span>@(_job?.Name ?? "Unemployed")</span>
        }
        else
        {
          <span>???</span>
        }
      </div>
    </div>

    <h3 class="text-2xl mt-4">Attributes</h3>
    <div class="space-y-1">
      <div class="flex">
        <span class="font-bold">Intelligence</span>
        <span>&nbsp;:&nbsp;@_character.Attributes.Intelligence</span>
      </div>
      <div class="flex">
        <span class="font-bold">Strength</span>
        <span>&nbsp;:&nbsp;@_character.Attributes.Strength</span>
      </div>
      <div class="flex">
        <span class="font-bold">Charisma</span>
        <span>&nbsp;:&nbsp;@_character.Attributes.Charisma</span>
      </div>
    </div>


    <h3 class="text-2xl">Traits</h3>
    @if (_traits is null || _traits.Count == 0)
    {
      <p class="text-gray-500">No traits.</p>
    }
    else
    {
      <div class="space-y-1">
        @foreach (var trait in _traits)
        {
          <p>@trait.Name</p>
        }
      </div>
    }

    <h3 class="text-2xl">Relationships</h3>

    @if (_relationships is null || _relationships.Count == 0)
    {
      <p class="text-gray-500">No relationships.</p>
    }
    else
    {
      <div class="space-y-1">
        @foreach (var rel in _relationships)
        {
          var relationshipCharacterColorKey = CharacterColorHelper.GetColorKey(rel.TargetCharacter, GameSaveStore.CurrentSave!.PlayerCharacterId);

          <div class="flex">
            <span>
              <NavLink class=@($"font-bold {relationshipCharacterColorKey.ToTailwindClass()}")
                       href="@($"/characterdetails/{rel.TargetCharacter.Id}")">
                @rel.TargetCharacter.Name
              </NavLink>
            </span>
            <span>&nbsp;:&nbsp;@rel.Type</span>
          </div>
        }
      </div>
    }

    <NavLink href="/game" class="trpg-btn">Back</NavLink>

  </div>
}

@code {

  /// <summary>
  /// Character identifier from the route.
  /// </summary>
  [Parameter]
  public Guid CharacterId { get; set; }

  private Character? _character;
  private bool _hasError;

  private List<Trait>? _traits;
  private List<RelationshipDisplay>? _relationships;
  private Relationship? _playerRelationship;
  private Job? _job;

  /// <summary>
  /// Load character details when parameters change.
  /// </summary>
  protected override async Task OnParametersSetAsync()
  {
    if (GameSaveStore.CurrentSave is null)
    {
      _hasError = true;
      return;
    }

    await Task.Yield(); // Ensures component is ready

    var world = GameSaveStore.CurrentSave.World;
    _character = world.Characters.FirstOrDefault(c => c.Id == CharacterId);

    if (_character is null)
    {
      _hasError = true;
      return;
    }

    var allTraits = await TraitService.GetAllTraitsAsync(CancellationToken.None);
    _traits = allTraits.Where(t => _character.TraitsId.Contains(t.Id)).ToList();

    _relationships = world.Relationships.Where(r => r.SourceCharacterId == _character.Id).SelectMany(r =>
      {
        var otherCharacter = world.Characters.FirstOrDefault(c => c.Id == r.TargetCharacterId);
        return otherCharacter is null ? Enumerable.Empty<RelationshipDisplay>() : [new RelationshipDisplay(otherCharacter, GetRelationshipLabel(r.Type, true))];
      }
    ).ToList();

    _playerRelationship = world.Relationships.FirstOrDefault(r => r.SourceCharacterId == GameSaveStore.CurrentSave!.PlayerCharacterId && r.TargetCharacterId == _character.Id);

    if (_character.JobId is not null)
    {
      _job = await JobService.GetByIdAsync(_character.JobId.Value, CancellationToken.None);
    }
  }

  private static string GetRelationshipLabel(RelationshipType type, bool isSource)
  {
    return type switch
    {
      RelationshipType.Parent => isSource ? "Child" : "Parent",
      RelationshipType.Child => isSource ? "Parent" : "Child",
      RelationshipType.Grandparent => isSource ? "Grandchild" : "Grandparent",
      RelationshipType.Grandchild => isSource ? "Grandparent" : "Grandchild",
      _ => type.GetDisplayName()
    };
  }

  private record RelationshipDisplay(Character TargetCharacter, string Type);

}
