@using TextLifeRpg.Application.Abstraction
@implements IDisposable
@inject GameSaveStore GameSaveStore
@inject ILocationService LocationService
@inject IRoomService RoomService

<div class="flex h-full flex-col p-2">
  <div class="flex flex-col items-center">
    <p class="text-xl font-bold">
      @GameSaveStore.CurrentSave!.World.CurrentDate
    </p>

    @if (_locationName != null)
    {
      <p class="text-lg">
        Location: @_locationName
      </p>
    }
    else
    {
      <p class="text-lg italic">
        Location: Unknown
      </p>
    }

    @if (_roomName != null)
    {
      <p class="text-lg">
        Room: @_roomName
      </p>
    }

    @if (GameSaveStore.CurrentSave!.NpcInteractionType is null && _npcsInLocation.Count > 0)
    {
      <div class="flex flex-col mt-4 w-full overflow-y-auto pt-2 px-2">
        @foreach (var npc in _npcsInLocation.OrderBy(n => n.Name))
        {
          var color = CharacterColorHelper.GetColorKey(npc, GameSaveStore.CurrentSave!.PlayerCharacterId).ToTailwindClass();

          <span
            class="cursor-pointer @color"
            @onclick="async () => await OnNpcClickedInternal(npc)"
            @oncontextmenu:preventDefault="true"
            @oncontextmenu="@(async () => await OnNpcRightClickedInternal(npc))">
            @npc.Name
          </span>
        }
      </div>
    }
    else if (GameSaveStore.CurrentSave!.NpcInteractionType is not null && _interactingNpc is not null)
    {
      var color = CharacterColorHelper.GetColorKey(_interactingNpc, GameSaveStore.CurrentSave!.PlayerCharacterId).ToTailwindClass();
      <div class="flex mt-4 pt-2 px-2">
        <span>Interacting with&nbsp;</span>
        <span
          class="cursor-pointer @color"
          @onclick="async () => await OnNpcClickedInternal(_interactingNpc)">
          @_interactingNpc.Name
        </span>
      </div>
      <div class="flex mt-4">
        <span>
          Relationship :&nbsp;
        </span>
        <span>
          @{
            var playerId = GameSaveStore.CurrentSave!.PlayerCharacterId;
            var relationship = GameSaveStore.CurrentSave!.World.Relationships.FirstOrDefault(r => r.SourceCharacterId == _interactingNpc.Id && r.TargetCharacterId == playerId);

            var relationshipValue = relationship?.Value ?? 0;
          }
          @relationshipValue
        </span>
      </div>
    }
  </div>
  <div class="flex-grow"></div>
</div>

@code {
  private string? _locationName;
  private string? _roomName;

  private readonly List<Character> _npcsInLocation = [];
  private Character? _interactingNpc;

  /// <summary>
  /// Callback invoked when the user clicks on a NPC's name.
  /// </summary>
  [Parameter, EditorRequired]
  public EventCallback<Character> OnNpcClicked { get; set; }

  /// <summary>
  /// Callback invoked when the user right clicks on a NPC's name.
  /// </summary>
  [Parameter, EditorRequired]
  public EventCallback<Character> OnNpcRightClicked { get; set; }

  /// <summary>
  /// Registers for game state changes and initializes location display.
  /// </summary>
  protected override async Task OnInitializedAsync()
  {
    GameSaveStore.OnAsyncChange += HandleGameSaveChangedAsync;
    await GameSaveChanged();
  }

  /// <summary>
  /// Handles change events from the game state store.
  /// </summary>
  private async Task HandleGameSaveChangedAsync()
  {
    await GameSaveChanged();
  }

  /// <summary>
  /// Updates location and room names and triggers a UI refresh.
  /// </summary>
  private async Task GameSaveChanged()
  {
    var save = GameSaveStore.CurrentSave;

    var player = save?.PlayerCharacter;

    if (player?.LocationId is null || save is null)
    {
      return;
    }

    await UpdateNamesAsync();

    _interactingNpc = save.InteractingNpc;

    _npcsInLocation.Clear();
    _npcsInLocation.AddRange(save.World.Characters.Where(c => c.Id != player.Id && c.LocationId == player.LocationId));

    StateHasChanged();
  }

  /// <summary>
  /// Retrieves and sets the current player location and room names.
  /// </summary>
  private async Task UpdateNamesAsync()
  {
    var player = GameSaveStore.CurrentSave?.PlayerCharacter;

    if (player?.LocationId != null)
    {
      try
      {
        var location = await LocationService.GetByIdAsync(player.LocationId.Value, CancellationToken.None);
        _locationName = location.Name;
      }
      catch
      {
        _locationName = "Unknown";
      }
    }
    else
    {
      _locationName = "Unknown";
    }

    if (player?.RoomId != null)
    {
      try
      {
        var room = await RoomService.GetByIdAsync(player.RoomId.Value, CancellationToken.None);
        _roomName = room.Name;
      }
      catch
      {
        _roomName = "Unknown";
      }
    }
    else
    {
      _roomName = "Unknown";
    }
  }

  /// <summary>
  /// Triggers the OnNpcClicked callback.
  /// </summary>
  private async Task OnNpcClickedInternal(Character npc)
  {
    await OnNpcClicked.InvokeAsync(npc);
  }

  /// <summary>
  /// Triggers the OnNpcRightClicked callback.
  /// </summary>
  private async Task OnNpcRightClickedInternal(Character npc)
  {
    await OnNpcRightClicked.InvokeAsync(npc);
  }

  /// <summary>
  /// Unregisters event handlers when the component is disposed.
  /// </summary>
  public void Dispose()
  {
    GameSaveStore.OnAsyncChange -= HandleGameSaveChangedAsync;
  }

}
