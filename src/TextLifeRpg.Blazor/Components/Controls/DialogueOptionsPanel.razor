@using TextLifeRpg.Application.Abstraction
@inject GameSaveStore GameSaveStore
@inject IDialogueService DialogueService

<div class="flex gap-4 p-2">
  @if (_availableDialogueOptions is null)
  {
    <p>Loading dialogue options...</p>
  }
  else if (!_availableDialogueOptions.Any())
  {
    <p class="italic">No dialogue options available.</p>
  }
  else
  {
    @foreach (var dialogueOption in _availableDialogueOptions)
    {
      <button class="trpg-btn inline-block"
              @onclick="async () => await OnDialogueOptionClickedInternal(dialogueOption)">
        @(dialogueOption.Label)
      </button>
    }
  }
</div>

@code {

  private IReadOnlyCollection<DialogueOption>? _availableDialogueOptions;

  /// <summary>
  /// Callback invoked when the user clicks on a dialogue option.
  /// </summary>
  [Parameter, EditorRequired]
  public EventCallback<DialogueOption> OnDialogueOptionClicked { get; set; }

  /// <summary>
  /// Loads available dialogue options on component initialization.
  /// </summary>
  protected override async Task OnInitializedAsync()
  {
    await LoadAvailableDialogueOptionsAsync();
  }

  /// <summary>
  /// Loads all dialogue options available to the current player character.
  /// </summary>
  private async Task LoadAvailableDialogueOptionsAsync()
  {
    var gameSave = GameSaveStore.CurrentSave!;

    if (gameSave.InteractingNpc is null || gameSave.NpcInteractionType != NpcInteractionType.Dialogue)
    {
      _availableDialogueOptions = [];
      return;
    }

    if (gameSave.PendingDialogueOptions.Any())
    {
      _availableDialogueOptions = gameSave.PendingDialogueOptions.ToList();
      return;
    }

    _availableDialogueOptions = await DialogueService.GetPossibleDialogueOptionsAsync(gameSave, CancellationToken.None);
  }

  /// <summary>
  /// Triggers the OnNpcClicked callback.
  /// </summary>
  private async Task OnDialogueOptionClickedInternal(DialogueOption dialogueOption)
  {
    await OnDialogueOptionClicked.InvokeAsync(dialogueOption);
  }

  public async Task ReloadAsync()
  {
    await LoadAvailableDialogueOptionsAsync();
    StateHasChanged();
  }

}
